// _atoms.scss

/*************************************************************************************************************************************
    RESET
************************************************************************************************************************************/

@-ms-viewport {
    width: device-width;
}

* {
    background: none;
    border: 0;
    font-style: normal;
    font-weight: normal;
    height: auto;
    list-style: none;
    margin: 0;
    padding: 0;
    outline: 0;
    text-decoration: none;
    vertical-align: baseline;
    width: auto;
    -webkit-margin-before: 0;
    -webkit-margin-end: 0;
    -webkit-margin-after: 0;
    -webkit-margin-start: 0;
    -webkit-padding-before: 0;
    -webkit-padding-end: 0;
    -webkit-padding-after: 0;
    -webkit-padding-start: 0;
    -webkit-text-size-adjust: 100%;
    -moz-text-size-adjust: 100%;
    -ms-text-size-adjust: 100%;
    text-size-adjust: 100%;
    text-rendering: optimizeLegibility;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
    -webkit-tap-highlight-color: transparent;
    -webkit-appearance: none;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

html {
    overflow-y: scroll;
}

img {
    vertical-align: middle;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
    display: block;
}

dt,
dd {
    display: inline;
}

table {
    border-collapse: collapse;
    border-spacing: 0;
}

input[type="button"],
input[type="submit"],
input[type="reset"],
button,
a {
    cursor: pointer;
}

/**************************************************************************************************
2.  COLORS: use lighten() or darken() Sass to control color value
**************************************************************************************************/

$primary: #308a00;
$blk: #000000;
$wht: #ffffff;
$warning: #bd0000;
$caution: #f0d800;
$good: #42bd00;

/**************************************************************************************************
3.  TYPOGRAPHY: base font of 16px and 1.5 line height
**************************************************************************************************/

%font {
    font-family: Arial, Helvetica, sans-serif;
    font-size: 16px;
    line-height: 1.5;
}

@function calculate-font($size) {
	$font-size: $size/16px;
	@return $font-size * 1rem;
}

@mixin font-size($size) {
	font-size: calculate-font($size);
}

@mixin font-style($style: normal, $weight: normal) {
    @if $style { font-style: $style; }
    @if $weight { font-weight: $weight; }
}

@mixin type-position($value: left) {
    text-align: $value;
}

@mixin type-scale($value: 1.5) {
    line-height: $value;
}

@mixin type-case($value: uppercase) {
    text-transform: $value;
}

@mixin type-spacing($value: normal) {
    white-space: $value;
}

@mixin type-wrap($value: normal) {
    word-break: $value;
}

%txt-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

/************************************************************************************************************************************

    flexbox grid mixins @includes used in styles.scss
    
    - Flexbox: @include flex;
    - Flex Direction: @include flex-flow(); default is row (row-reverse, column, column-reverse)
    - Flex Wrap: @include flex-wrap(); default is nowrap (wrap, wrap-reverse)
    - Flex Justify Content: @include flex-justify(); default is flex-start (flex-end, center, space-between, space-around)
    - Flex Align Items: @include flex-align(); default is stretch (flex-start, flex-end, center)
    - Flex Align Content: @include flex-content(); default is stretch (flex-start, flex-end, center, space-between, space-around)
    - Flex Order: @include flex-order(); default is 0
    - Flex Grow:  @include flex-grow(); default is 0
    - Flex Shrink: @include flex-shrink(); default is 1
    - Flex Basis: @include flex-basis(); default is auto
    - Flex Align Self: @include flex-self(); default is auto (flex-start, flex-end, center, stretch)

    Visual Guide to CSS3 Flexbox Properties: https://scotch.io/tutorials/a-visual-guide-to-css3-flexbox-properties

************************************************************************************************************************************/

/* flexbox container mixins */
@mixin flex {
    display: -webkit-flex;
    display: flex;
}
@mixin flex-flow($value: row) {
    @if $value == row-reverse {
        -webkit-flex-direction: row-reverse;
        flex-direction: row-reverse;
    } @else if $value == column {
        -webkit-flex-direction: column;
        flex-direction: column;
    } @else if $value == column-reverse {
        -webkit-flex-direction: column-reverse;
        flex-direction: column-reverse;
    } @else {
        -webkit-flex-direction: row;
        flex-direction: row;
    }
    -webkit-flex-direction: $value;
    flex-direction: $value;
}
@mixin flex-wrap($value: nowrap) {
    @if $value == wrap {
        -webkit-flex-wrap: wrap;
        flex-wrap: wrap;
    } @else {
        -webkit-flex-wrap: nowrap;
        flex-wrap: nowrap;
    }
    -webkit-flex-wrap: $value;
    flex-wrap: nowrap $value;
}
@mixin flex-justify($value: flex-start) {
    @if $value == flex-end {
        -webkit-justify-content: flex-end;
        justify-content: flex-end;
    } @else if $value == center {
        -webkit-justify-content: center;
        justify-content: center;
    } @else if $value == space-between {
        -webkit-justify-content: space-between;
        justify-content: space-between;
    } @else if $value == space-around {
        -webkit-justify-content: space-around;
        justify-content: space-around;
    } @else {
        -webkit-justify-content: flex-start;
        justify-content: flex-start;
    }
    -webkit-justify-content: $value;
    justify-content: $value;
}
@mixin flex-align($value: stretch) {
    @if $value == flex-start {
        -webkit-align-items: flex-start;
        align-items: flex-start;
    } @else if $value == flex-end {
        -webkit-align-items: flex-end;
        align-items: flex-end;
    } @else if $value == center {
        -webkit-align-items: center;
        align-items: center;
    } @else {
        -webkit-align-items: stretch;
        align-items: stretch;
    }
    -webkit-align-items: $value;
    align-items: $value;
}
@mixin flex-content($value: stretch) {
    @if $value == flex-start {
        -webkit-align-content: flex-start;
        align-content: flex-start;
    } @else if $value == flex-end {
        -webkit-align-content: flex-end;
        align-content: flex-end;
    } @else if $value == center {
        -webkit-align-content: center;
        align-content: center;
    } @else if $value == space-between {
        -webkit-align-content: space-between;
        align-content: space-between;
    } @else if $value == space-around {
        -webkit-align-content: space-around;
        align-content: space-around;
    } @else {
        -webkit-align-content: stretch;
        align-content: stretch;
    }
    -webkit-align-content: $value;
    align-content: $value;
}

/* flexbox item mixins */
@mixin flex-order($value: 0) {
    -webkit-order: $value;
    order: $value;
}
@mixin flex-grow($value: 0) {
    -webkit-flex-grow: $value;
    flex-grow: $value;
}
@mixin flex-shrink($value: 1) {
    -webkit-flex-shrink: $value;
    flex-shrink: $value;
}
@mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
    flex-basis: $value;
}
@mixin flex-self($value: auto) {
    @if $value == flex-start {
        -webkit-align-self: flex-start;
        align-self: flex-start;
    } @else if $value == flex-end {
        -webkit-align-self: flex-end;
        align-self: flex-end;
    } @else if $value == center {
        -webkit-align-self: center;
        align-self: center;
    } @else if $value == stretch {
        -webkit-align-self: stretch;
        align-self: stretch;
    } @else {
        -webkit-align-self: auto;
        align-self: auto;
    }
    -webkit-align-self: $value;
    align-self: $value;
}

/* flexbox grid mixins */
@mixin flex-row {
    @include flex;
    @include flex-flow();
    @include flex-wrap();
    @include flex-justify(space-between);
    @include flex-align();
    @include flex-content();
}

@mixin flex-column {
    @include flex-grow();
    @include flex-shrink();
    @include flex-basis();
}

@mixin flex-size($value) {
    @include flex-grow();
    @include flex-shrink();
    @include flex-basis($value);
}

