// _atoms.scss

$primary: #308a00;
$black: #000000;
$gray: #808080;
$white: #ffffff;
$warning: #bd0000;
$caution: #f0d800;
$good: #028C00;

$base-font: 'Roboto', Arial, Helvetica, sans-serif;
$base-size: 16px;
$base-scale: 1.5;

$xs: 4px;
$sm: 8px;
$med: 16px;
$lg: 32px;
$xlg: 64px;

$important: !important;

@mixin reset {
    * {
        background: none;
        border: 0;
        font-style: normal;
        font-weight: normal;
        height: auto;
        list-style: none;
        margin: 0;
        padding: 0;
        outline: 0;
        text-decoration: none;
        vertical-align: baseline;
        width: auto;
        -webkit-margin-before: 0;
        -webkit-margin-end: 0;
        -webkit-margin-after: 0;
        -webkit-margin-start: 0;
        -webkit-padding-before: 0;
        -webkit-padding-end: 0;
        -webkit-padding-after: 0;
        -webkit-padding-start: 0;
        -webkit-text-size-adjust: 100%;
        -moz-text-size-adjust: 100%;
        -ms-text-size-adjust: 100%;
        text-size-adjust: 100%;
        text-rendering: optimizeLegibility;
        -webkit-font-smoothing: antialiased;
        -moz-osx-font-smoothing: grayscale;
        -webkit-tap-highlight-color: transparent;
        -webkit-appearance: none;
        -webkit-box-sizing: border-box;
        -moz-box-sizing: border-box;
        box-sizing: border-box;
    }

    html {
        font-size: 100%;
        overflow-y: scroll;
        font-family: $base-font;
        font-size: $base-size;
        line-height: $base-scale;
    }

    img {
        vertical-align: middle;
    }
    
    article,
    aside,
    details,
    figcaption,
    figure,
    footer,
    header,
    hgroup,
    main,
    menu,
    nav,
    section,
    summary {
        display: block;
    }
    
    dt,
    dd {
        display: inline;
    }
    
    table {
        border-collapse: collapse;
        border-spacing: 0;
        width: 100%;
    }
    
    input[type="button"],
    input[type="submit"],
    input[type="reset"],
    button,
    a {
        cursor: pointer;
    }

}

@function calculate-font($size) {
	$font-size: $size/$base-size;
	@return $font-size * 1rem;
}

@mixin font-size($size) {
    
    font-size: calculate-font($size);
}

@mixin font-style($value: normal) {
    @if $value == bold {
        font-weight: bold;
    } @else if $value == italic {
        font-style: italic;
    } @else if $value == underline {
        text-decoration: underline;
    } @else if $value == no-underline {
        text-decoration: none;
    } @else {
        font-weight: $value;
        font-style: $value;
    }
}

@mixin type-position($value: left) {
    @if $value == right {
        text-align: right;
    } @else if $value == center {
        text-align: center;
    } @else {
        text-align: $value;
    }
}

@mixin type-case($value: uppercase) {
    @if $value == capitalize {
        text-transform: capitalize;
    } @else if $value == lowercase {
        text-transform: lowercase;
    } @else {
        text-transform: $value;
    }
}

@mixin type-flow($value: normal) {
    @if $value == nowrap {
        white-space: nowrap;
    } @else if $value == pre {
        white-space: pre;
    } @else if $value == pre-line {
        white-space: pre-line;
    } @else if $value == pre-wrap {
        white-space: pre-wrap;
    } @else if $value == break-word {
        word-wrap: break-word;
    } @else if $value == truncate {
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    } @else {
        white-space: $value;
        word-wrap: $value;
    }
}

@mixin position($value) {
    @if $value == relative {
        position: relative;
    } @else if $value == absolute {
        position: absolute;
    } @else if $value == fixed {
       position: fixed;
    }
}

@mixin position-location($value) {
    @if $value == top {
        @include position(absolute);
        top: 0;
    } @else if $value == top-left {
        @include position(absolute);
        top: 0;
        left: 0;
    } @else if $value == top-right {
        @include position(absolute);
        top: 0;
        right: 0;
    } @else if $value == bottom {
        @include position(absolute);
        bottom: 0;
    } @else if $value == bottom-left {
        @include position(absolute);
        bottom: 0;
        left: 0;
    } @else if $value == bottom-right {
        @include position(absolute);
        bottom: 0;
        right: 0;
    } @else if $value == left {
        @include position(absolute);
        left: 0;
    } @else if $value == right {
        @include position(absolute);
        right: 0;
    } @else if $value == fixed-top {
        @include position(absolute);
        top: 0;
    } @else if $value == fixed-top-left {
        @include position(fixed);
        top: 0;
        left: 0;
    } @else if $value == fixed-top-right {
        @include position(fixed);
        top: 0;
        right: 0;
    } @else if $value == fixed-bottom {
        @include position(fixed);
        bottom: 0;
    } @else if $value == fixed-bottom-left {
        @include position(fixed);
        bottom: 0;
        left: 0;
    } @else if $value == fixed-bottom-right {
        @include position(fixed);
        bottom: 0;
        right: 0;
    } @else if $value == fixed-left {
        @include position(fixed);
        left: 0;
    } @else if $value == fixed-right {
        @include position(fixed);
        right: 0;
    } 
}

@mixin flex {
    display: -webkit-flex;
    display: flex;
}
@mixin flex-flow($value: row) {
    @if $value == row-reverse {
        -webkit-flex-direction: row-reverse;
        flex-direction: row-reverse;
    } @else if $value == column {
        -webkit-flex-direction: column;
        flex-direction: column;
    } @else if $value == column-reverse {
        -webkit-flex-direction: column-reverse;
        flex-direction: column-reverse;
    } @else {
        -webkit-flex-direction: $value;
        flex-direction: $value;
    }
}
@mixin flex-wrap($value: nowrap) {
    @if $value == wrap {
        -webkit-flex-wrap: wrap;
        flex-wrap: wrap;
    } @else {
        -webkit-flex-wrap: $value;
        flex-wrap: nowrap $value;
    }
}
@mixin flex-justify($value: flex-start) {
    @if $value == flex-end {
        -webkit-justify-content: flex-end;
        justify-content: flex-end;
    } @else if $value == center {
        -webkit-justify-content: center;
        justify-content: center;
    } @else if $value == space-between {
        -webkit-justify-content: space-between;
        justify-content: space-between;
    } @else if $value == space-around {
        -webkit-justify-content: space-around;
        justify-content: space-around;
    } @else {
        -webkit-justify-content: $value;
        justify-content: $value;
    }
}
@mixin flex-align($value: stretch) {
    @if $value == flex-start {
        -webkit-align-items: flex-start;
        align-items: flex-start;
    } @else if $value == flex-end {
        -webkit-align-items: flex-end;
        align-items: flex-end;
    } @else if $value == center {
        -webkit-align-items: center;
        align-items: center;
    } @else {
        -webkit-align-items: $value;
        align-items: $value;
    }
}
@mixin flex-content($value: stretch) {
    @if $value == flex-start {
        -webkit-align-content: flex-start;
        align-content: flex-start;
    } @else if $value == flex-end {
        -webkit-align-content: flex-end;
        align-content: flex-end;
    } @else if $value == center {
        -webkit-align-content: center;
        align-content: center;
    } @else if $value == space-between {
        -webkit-align-content: space-between;
        align-content: space-between;
    } @else if $value == space-around {
        -webkit-align-content: space-around;
        align-content: space-around;
    } @else {
        -webkit-align-content: $value;
        align-content: $value;
    }
    
}

@mixin flex-order($value: 0) {
    -webkit-order: $value;
    order: $value;
}
@mixin flex-grow($value: 0) {
    -webkit-flex-grow: $value;
    flex-grow: $value;
}
@mixin flex-shrink($value: 1) {
    -webkit-flex-shrink: $value;
    flex-shrink: $value;
}
@mixin flex-basis($value: auto) {
    -webkit-flex-basis: $value;
    flex-basis: $value;
}
@mixin flex-self($value: auto) {
    @if $value == flex-start {
        -webkit-align-self: flex-start;
        align-self: flex-start;
    } @else if $value == flex-end {
        -webkit-align-self: flex-end;
        align-self: flex-end;
    } @else if $value == center {
        -webkit-align-self: center;
        align-self: center;
    } @else if $value == stretch {
        -webkit-align-self: stretch;
        align-self: stretch;
    } @else {
        -webkit-align-self: $value;
        align-self: $value;
    }
}

@mixin flex-row {
    @include flex;
    @include flex-flow();
    @include flex-wrap();
    @include flex-justify(space-between);
    @include flex-align();
    @include flex-content();
}

@mixin flex-column($value) {
    @include flex-grow();
    @include flex-shrink();
    @include flex-basis($value);
}

@mixin width($value) {
    @if $value == auto {
        width: auto;
    } @else {
        width: $value;
    }
}

@mixin floats($value) {
    @if $value == left {
        float: left;
    } @else if $value == right {
        float: right;
    } @else if $value == none {
        float: none;
    }
}

@mixin display($value) {
    @if $value == block {
        display: block;
    } @else if $value == inline-block {
        display: inline-block;
    } @else if $value == inline {
        display: inline;
    } @else if $value == hide {
        display: none;
    } @else if $value == hidden {
        visibility: hidden;
    } @else if $value == visible {
        visibility: visible;
    } @else if $value == show {
        display: block;
    } @else if $value == none {
        display: none;
    }
}

@mixin align($value: baseline) {
    @if $value == top {
        vertical-align: top;
    } @else if $value == middle {
        vertical-align: middle;
    } @else if $value == bottom {
        vertical-align: bottom;
    } @else {
        vertical-align: baseline;
    }
}

@mixin overflow($value) {
    @if $value == x-auto {
        overflow-x: auto;
    } @else if $value == y-auto {
        overflow-y: auto;
    } @else if $value == x-scroll {
        overflow-x: scroll;
    } @else if $value == y-scroll {
        overflow-y: scroll;
    } @else if $value == auto {
        overflow: auto;
    }
}

@mixin space($type: margin, $direction: all, $amount: 0) {
	@if $type == padding {
		@if $direction == all {
			padding: $amount;
		} @else if $direction == top {
			padding-top: $amount
		} @else if $direction == left {
			padding-left: $amount
		} @else if $direction == right {
			padding-right: $amount
		} @else if $direction == bottom {
			padding-bottom: $amount
        } @else {
            padding: 0;
        }
	} @else if $type == margin {
		@if $direction == all {
			margin: $amount;
		} @else if $direction == top {
			margin-top: $amount
		} @else if $direction == left {
			margin-left: $amount
		} @else if $direction == right {
			margin-right: $amount
		} @else if $direction == bottom {
			margin-bottom: $amount
        } @else if $direction == auto {
            margin: 0 auto;
        } @else {
            margin: 0;
        }
	}
}

@mixin background($type: color, $value: #000000){
    @if $type == color {
        background: $value;
    } @else if $type == image {
        background: $value no-repeat;
    }
}

@mixin border($direction: all, $size: 1px, $type: solid, $color: #000000) {
    @if $direction == all {
        border: $size $type $color;
    } @else if $direction == top {
        border-top: $size $type $color;
    } @else if $direction == left {
        border-left: $size $type $color;
    } @else if $direction == right {
        border-right: $size $type $color;
    } @else if $direction == bottom {
        border-bottom: $size $type $color;
    } @else {
        border: 0 none transparent;
    }
}

@mixin radius($direction: all, $size: 3px) {
    @if $direction == all {
        border-radius: $size;
    } @else if $direction == top-left {
        border-top-left-radius: $size;
    } @else if $direction == top-right {
        border-top-right-radius: $size;
    } @else if $direction == bottom-left {
        border-bottom-left-radius: $size;
    } @else if $direction == bottom-right {
        border-bottom-right-radius: $size;
    } @else {
        border: 0;
    }
}

@mixin shadow($type: false, $horizontal: 1px, $vertical: 1px, $blur: 3px, $spread: 3px, $color: rgba(0,0,0,0.50)) {
    @if $type == inset {
        box-shadow: inset $horizontal $vertical $blur $spread $color;
    } @else {
        box-shadow: $horizontal $vertical $blur $spread $color;
    }
}

@mixin opacity($color: #000000, $value: .5) {
    opacity: $value;
    background: $color;
}

@mixin table-style($value: none) {
    @if $value == standard {
        @include border(all, 1px, solid, #000000);
    } @else if $value == ladder {
        @include border(bottom, 1px, solid, #000000);
    } @else if $value == ladder-dotted {
        @include border(bottom, 1px, dotted, #000000);
    } @else if $value == zebra {
        table tr:nth-child(even) td {
            background: #000000;
        }
    } @else {
        @include border();
        background: none;
    }
}

@mixin list-style($value: none) {
    @if $value == bullet {
        list-style: disc;
    } @else if $value == ladder {
        @include border(bottom, 1px, solid, #000000);
    } @else if $value == ladder-dotted {
        @include border(bottom, 1px, dotted, #000000);
    } @else if $value == zebra {
        table li:nth-child(even) td {
            background: #000000;
        }
    } @else {
        @include border();
        list-style: none;
        background: none;
    }
}